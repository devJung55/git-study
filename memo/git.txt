버전 관리 시스템
	원하는 시점(버전)으로 이동할 수 있으며,
	각 버전별로 여러 개발자가 협업할 수 있는 최적의 환경을 제공하는 시스템
	
SVN
	작업 내역 커밋 시 변경 사항과 히스토리가 즉시 서버로 전송되기 때문에 관리가 용이하다.
	또한 간단한 설치와 사용 방법으로 별도의 교육 없이도 초보자도 쉽게 사용할 수 있다.
	하지만 항상 원격 저장소(SVN 서버)를 필요로 하며 서버 간 버전 관리가 힘들다.

Git(분산형 버전 관리 시스템)
	SVN이 가지고 있던 클라이언트와 서버 간의 버전 관리 문제를 많이 보완해준 시스템
	서버 뿐만 아니라 로컬에서도 버전 관리가 가능하며, 로컬이 서버가 될 수 있고,
	서버도 로컬이 될 수 있다. 브랜치라는 개념을 사용하여 마음대로 로컬 환경에서도
	커밋과 버전 관리가 가능하다.

Git-Hub(분산형 버전 관리 공유 서버)
	Git으로 관리하는 프로젝트를 호스팅 해주는 사이트 중 하나이다.
	로컬 저장소에서 작업하던 파일을 다른 클라이언트와 공유하기 위한 서버이다.

-------------------------------------------------------------------------------------------

브랜치
	한 개의 처리 경로를 여러 개의 처리 경로로 나눌 때 사용한다.
	보통 동시에 버전 관리를 해야할 때 사용하며,
	기본 브랜치는 master(현재는 main)이고, 각 각의 브랜치는 현재 버전에 대한 커밋을 가리키고 있다.

-------------------------------------------------------------------------------------------

Organization 생성 -> Repository 생성 -> Settings -> Collaborators and teams -> Add people
-> 팀장 본인 계정 추가 -> Role: Admin -> 자격 관리 증명 삭제 -> 터미널에서 push -> 브라우저 로그인 선택
-> fork 받기 -> 개인 Repository 추가 -> 작업 내용 개인 Repository에 push -> Pull Request 작성 
-> pull -> 변경 사항 있을 시 다시 push

1. 팀장이 새로운 Organization 생성
2. Repository 생성
3. VSCode .gitignore 추가
4. Organization Repository에 push
5. 전체 인원 fork
6. 팀원 clone
7. 팀장이 gitTest 폴더 추가
8. test.html 추가
9. 팀장 본인 이름 body에 작성
10. add, commit, push, pr, merge
11. 전체 팀원 pull
12. 팀원 순서대로 위 차례로 진행
13. 전체 팀원 이름이 body에 작성될 경우 강사 호출 














